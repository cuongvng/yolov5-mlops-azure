# Continuous Integration (CI) pipeline that orchestrates the deployment of the yolov5 model.

# Runtime parameters to select artifacts
parameters:
- name : artifactBuildId
  displayName: Model Train CI Build ID. Default is 'latest'.
  type: string
  default: latest

pr: none

# Trigger this pipeline on model-train pipeline completion
trigger: none
resources:
  containers:
  - container: mlops
    image: mcr.microsoft.com/azure-dev-cli-apps:latest
  pipelines:
  - pipeline: yolov5-Train-Eval-Reg-pipeline
    source: yolov5-Train-Eval-Reg-pipeline # Name of the triggering pipeline
    trigger:
      branches:
        include:
        - master

variables:
- template: yolov5-variables-template.yml
- group: yolov5-aml-vg
- name: DEPLOYMENT_FILE
  value: "online_deployment.yaml"

stages:
- stage: 'Deploy_Manage_Compute'
  displayName: 'Deploy to AZ ML Managed Endpoint'
  jobs:
  - job: "Deploy_Manage_Compute"
    displayName: "Deploy to AZ ML Managed Endpoint"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - download: none
    - template: yolov5-get-model-id-artifact-template.yml
      parameters:
        projectId: '$(resources.pipeline.yolov5-Train-Eval-Reg-pipeline.projectID)'
        pipelineId: '$(resources.pipeline.yolov5-Train-Eval-Reg-pipeline.pipelineID)'
        artifactBuildId: ${{ parameters.artifactBuildId }}
    - task: AzureCLI@2
      displayName: 'Install AzureML CLI v2'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptType: 'bash'
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)
        inlineScript: 'az extension add -n ml'
    - task: AzureCLI@2
      displayName: "Deploy to AZ ML Managed Endpoint (CLI)"
      condition: variables['ENDPOINT_NAME']
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptType: 'bash'
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)/$(SOURCES_DIR_TRAIN)
        inlineScript: |
          set -e # fail on error
          sed -i -e 's/$(MODEL_NAME)/$(MODEL_NAME):$(get_model.MODEL_VERSION)/g' $(DEPLOYMENT_FILE)
          # Update az ml deployment
          az ml online-deployment update -f $(DEPLOYMENT_FILE) \
          -e $(ENDPOINT_NAME)  \
          -g $(RESOURCE_GROUP) --workspace-name $(WORKSPACE_NAME) \
    # - task: AzureCLI@2
    #   displayName: 'Smoke test'
    #   inputs:
    #     azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       set -e # fail on error
    #       export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
    #       python3 -m ml_service.util.smoke_test_scoring_service --type ACI --service "$(ACI_DEPLOYMENT_NAME)"

# - stage: 'Deploy_AKS'
#   displayName: 'Deploy to AKS'
#   dependsOn: Deploy_ACI
#   condition: and(succeeded(), variables['AKS_DEPLOYMENT_NAME'])
#   jobs:
#   - job: "Deploy_AKS"
#     displayName: "Deploy to AKS"
#     container: mlops
#     timeoutInMinutes: 0
#     steps:
#     - template: yolov5-get-model-id-artifact-template.yml
#       parameters:
#         projectId: '$(resources.pipeline.yolov5-Train-Eval-Reg-pipeline.projectID)'
#         pipelineId: '$(resources.pipeline.yolov5-Train-Eval-Reg-pipeline.pipelineID)'
#         artifactBuildId: ${{ parameters.artifactBuildId }}
#     - task: AzureCLI@1
#       displayName: 'Install AzureML CLI'
#       inputs:
#         azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
#         scriptLocation: inlineScript
#         workingDirectory: $(Build.SourcesDirectory)
#         inlineScript: 'az extension add --source https://azurecliext.blob.core.windows.net/release/azure_cli_ml-1.27.0-py3-none-any.whl --yes'
#     - task: AzureCLI@1
#       displayName: "Deploy to AKS (CLI)"
#       inputs:
#         azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
#         scriptLocation: inlineScript
#         workingDirectory: $(Build.SourcesDirectory)/$(SOURCES_DIR_TRAIN)
#         inlineScript: |
#           set -e # fail on error
          
#           az ml model deploy --name $(AKS_DEPLOYMENT_NAME) --model '$(MODEL_NAME):$(get_model.MODEL_VERSION)' \
#           --compute-target $(AKS_COMPUTE_NAME) \
#           --ic ./scoring/inference_config.yml \
#           --dc ./scoring/adeployment_config_aks.yml \
#           -g $(RESOURCE_GROUP) --workspace-name $(WORKSPACE_NAME) \
#           --overwrite -v
#     - task: AzureCLI@1
#       displayName: 'Smoke test'
#       inputs:
#         azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
#         scriptLocation: inlineScript
#         inlineScript: |
#           set -e # fail on error
#           export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
#           python3 -m ml_service.util.smoke_test_scoring_service --type AKS --service "$(AKS_DEPLOYMENT_NAME)"

# - stage: 'Deploy_Webapp'
#   displayName: 'Deploy to Webapp'
#   condition: variables['WEBAPP_DEPLOYMENT_NAME']
#   jobs:
#   - job: "Deploy_Webapp"
#     displayName: "Package and deploy model"
#     container: mlops
#     timeoutInMinutes: 0
#     steps:
#     - template: yolov5-get-model-id-artifact-template.yml
#       parameters:
#         projectId: '$(resources.pipeline.yolov5-Train-Eval-Reg-pipeline.projectID)'
#         pipelineId: '$(resources.pipeline.yolov5-Train-Eval-Reg-pipeline.pipelineID)'
#         artifactBuildId: ${{ parameters.artifactBuildId }}
#     - template: yolov5-package-model-template.yml
#       parameters:
#         modelId: $(MODEL_NAME):$(get_model.MODEL_VERSION)
#         scoringScriptPath: '$(Build.SourcesDirectory)/$(SOURCES_DIR_TRAIN)/scoring/score.py'
#         condaFilePath: '$(Build.SourcesDirectory)/$(SOURCES_DIR_TRAIN)/conda_dependencies.yml'
#     - script: echo $(IMAGE_LOCATION) >image_location.txt
#       displayName: "Write image location file"
#     - task: AzureWebAppContainer@1
#       name: WebAppDeploy
#       displayName: 'Azure Web App on Container Deploy'
#       inputs:
#         azureSubscription: '$(AZURE_RM_SVC_CONNECTION)'
#         appName: '$(WEBAPP_DEPLOYMENT_NAME)'
#         resourceGroupName: '$(RESOURCE_GROUP)'
#         imageName: '$(IMAGE_LOCATION)'
#     - task: AzureCLI@1
#       displayName: 'Smoke test'
#       inputs:
#         azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
#         scriptLocation: inlineScript
#         inlineScript: |
#           set -e # fail on error
#           export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
#           python3 -m ml_service.util.smoke_test_scoring_service --type Webapp --service "$(WebAppDeploy.AppServiceApplicationUrl)/score"
